@startuml
class com.example.chess.pieces.King {
- boolean moved
+ <<Create>> King(Position,PieceColor)
+ ArrayList<Position> diagonalSearch(Board,ChessPiece[][])
+ ArrayList<Position> straightSearch(Board,ChessPiece[][])
+ ArrayList<Position> possibleMoves(Board,ChessPiece[][])
+ boolean movePiece(int,int)
+ boolean canKingSideCastle(Board)
+ boolean canQueenSideCastle(Board)
+ ArrayList<Position> legalMoves(Board,ChessPiece[][])
}
interface com.example.chess.abilities.StraightSearch {
+ ArrayList<Position> straightSearch(Board,ChessPiece[][])
}
class com.example.chess.BoardDesign.Tile {
- Paint paint
- int top_X
- int[] RGBColor
+ <<Create>> Tile(Context,int,int,int,int,int[])
# void onDraw(Canvas)
}
class com.example.chess.OfflineGame {
- int width
- Tile[][] tiles
- double CIRCLE_SIZE
- int[] WHITE
- int[] BLACK
- Board board
- boolean pressed
- int currentPiece_x
- PieceColor turn
- boolean flip
- ImageView blackPawn_01
- ImageView whitePawn_01
- ImageView[][] white
- ImageView[] possibleMoves
- Dialog quitD
# void onCreate(Bundle)
+ void onBackPressed()
+ void checkDialog()
+ void checkmateDialog(PieceColor)
+ void drawDialog()
+ void drawBoard_white()
+ void arrangeBoard(PieceColor)
+ int[] getTileId(int,int)
+ void setPositionOfCircle(int,int,ImageView)
+ void setInvisible()
+ void showLegalMoves(ChessPiece)
+ void movePieceImg(int,int,int,int)
+ void removePieceImg(int,int)
+ ImageView getPieceFromCanvasPos(int,int)
+ void setPiecePosition(int,int,ImageView)
+ int toPixels(int)
+ boolean inRange(int,int)
+ void playEatSound()
+ void playCheckSound()
+ void playCheckmateSound()
+ void switchTurn()
+ void rookCastle(PieceColor,int)
+ void cancel(View)
+ void quit(View)
- void rotateImage(ImageView)
+ void flipAll(View)
+ void toMain(View)
}
class com.example.chess.UserProfile {
- TextInputLayout username
- TextView username_label
- String _USERNAME
- int _SCORE
- DatabaseReference reference
- Boolean taken
- SharedPreferences pref
- ImageView img
- int REQUEST_CAMERA
- Bitmap bitmap
# void onCreate(Bundle)
- void selectImage()
+ void onActivityResult(int,int,Intent)
+ String convertBitmapToString(Bitmap)
+ Bitmap convertStringToBitmap(String)
- void showUserData()
+ void update(View)
# Boolean checkIfExsistAndChange()
- Boolean change_username()
- Boolean change_email()
- Boolean change_image()
- Boolean change_phone()
- Boolean change_name()
- Boolean change_password()
- Boolean validateName()
- Boolean validateUsername()
- Boolean validateEmail()
- Boolean validatePhone()
- Boolean validatePassword()
}
class com.example.chess.UserProfile$ValidationTextWatcher {
- View view
- <<Create>> ValidationTextWatcher(View)
+ void beforeTextChanged(CharSequence,int,int,int)
+ void onTextChanged(CharSequence,int,int,int)
+ void afterTextChanged(Editable)
}
enum com.example.chess.pieces.PieceColor {
+  WHITE
+  BLACK
}
class com.example.chess.pieces.Queen {
+ <<Create>> Queen(Position,PieceColor)
+ ArrayList<Position> diagonalSearch(Board,ChessPiece[][])
+ ArrayList<Position> straightSearch(Board,ChessPiece[][])
+ ArrayList<Position> possibleMoves(Board,ChessPiece[][])
}
class com.example.chess.User {
- String name
- int score
+ <<Create>> User(String,String,String,String,String,String,int)
+ <<Create>> User()
+ String getPassword()
+ void setPassword(String)
+ String getUsername()
+ void setUsername(String)
+ String getEmail()
+ void setEmail(String)
+ String getPhone()
+ void setPhone(String)
+ String getName()
+ void setName(String)
+ String getImage()
+ void setImage(String)
+ int getScore()
+ void setScore(int)
}
class com.example.chess.service.BackgroundMusicService {
- MediaPlayer mediaPlayer
+ MediaPlayer getMediaPlayer()
+ void onCreate()
+ IBinder onBind(Intent)
+ int onStartCommand(Intent,int,int)
+ void onDestroy()
+ void onBufferingUpdate(MediaPlayer,int)
+ void onCompletion(MediaPlayer)
+ boolean onError(MediaPlayer,int,int)
+ boolean onInfo(MediaPlayer,int,int)
+ void onPrepared(MediaPlayer)
+ void onSeekComplete(MediaPlayer)
}
abstract class com.example.chess.pieces.ChessPiece {
# Position position
# PieceColor color
+ <<Create>> ChessPiece(Position,PieceColor)
+ int getPos_x()
+ void setPos_x(int)
+ int getPos_y()
+ void setPos_y(int)
+ PieceColor getColor()
+ void setColor(PieceColor)
+ Position getPosition()
+ void setPosition(Position)
+ ArrayList<Position> legalMoves(Board,ChessPiece[][])
+ ArrayList<Position> possibleMoves(Board,ChessPiece[][])
+ boolean movePiece(int,int)
+ boolean canMove(int,int,Board,ChessPiece[][])
+ boolean inLegalMove(int,int,Board,ChessPiece[][])
+ boolean inPossibleMoves(int,int,Board,ChessPiece[][])
# Boolean inBoard(int,int,int)
+ boolean isMoveLegal(Position,Board)
+ ArrayList<Position> toList(Position[])
}
class com.example.chess.utils.Position {
- int pos_x
+ <<Create>> Position(int,int)
+ int getPos_x()
+ void setPos_x(int)
+ int getPos_y()
+ void setPos_y(int)
+ boolean equals(Object)
}
class com.example.chess.pieces.Rook {
- boolean moved
+ <<Create>> Rook(Position,PieceColor)
+ ArrayList<Position> straightSearch(Board,ChessPiece[][])
+ ArrayList<Position> possibleMoves(Board,ChessPiece[][])
+ boolean movePiece(int,int)
+ boolean isMoved()
+ void setMoved(boolean)
}
class com.example.chess.Login {
- Button login
- TextView main
- TextInputLayout username
- SharedPreferences sharedPreferences
# void onCreate(Bundle)
- Boolean validateUsername()
- Boolean validatePassword()
+ void toSignup(View)
+ void loginUser(View)
- void isUser()
}
class com.example.chess.chat.ChatList {
- String sender
+ <<Create>> ChatList(String,String)
+ String getMessage()
+ void setMessage(String)
+ String getSender()
+ void setSender(String)
}
class com.example.chess.pieces.Knight {
+ <<Create>> Knight(Position,PieceColor)
+ ArrayList<Position> knightSearch(Board,ChessPiece[][])
- Position knightSearch(int,int,int,int,Board,ChessPiece[][])
+ ArrayList<Position> possibleMoves(Board,ChessPiece[][])
}
class com.example.chess.pieces.Pawn {
# Boolean moved
+ <<Create>> Pawn(Position,PieceColor)
+ ArrayList<Position> straightSearch(Board,ChessPiece[][])
+ ArrayList<Position> possibleMoves(Board,ChessPiece[][])
+ boolean movePiece(int,int)
+ Boolean getMoved()
+ void setMoved(Boolean)
}
class com.example.chess.pieces.Bishop {
+ <<Create>> Bishop(Position,PieceColor)
+ ArrayList<Position> diagonalSearch(Board,ChessPiece[][])
+ ArrayList<Position> possibleMoves(Board,ChessPiece[][])
}
class com.example.chess.OnlineGame {
- String gameCode
~ Dialog checkmate_dialog
- SharedPreferences preferences
- String myUsername
- EditText message
- RecyclerView chat
- List<ChatList> messages
- ChatAdapter chatAdapter
- DatabaseReference chatReference
- DatabaseReference myLastMsg_reference
- DatabaseReference opponentLastMsg_reference
- DatabaseReference opponentUsername_ref
- DatabaseReference myColor_ref
- DatabaseReference game_ref
- DatabaseReference lastMove_White_ref
- DatabaseReference lastMove_Black_ref
- TextView oppoUsername_textView
- int width
- int currentPiece_x
- Board board
- boolean pressed
- int[] WHITE
- int[] BLACK
- Tile[][] tiles
- RelativeLayout chatContainer
- ImageView[][] white
- ImageView blackPawn_01
- ImageView whitePawn_01
- ImageView[] possibleMoves
- double CIRCLE_SIZE
- AbsoluteLayout pieces
- PieceColor turn
- PieceColor myColor_
- CircleImageView myImg
- boolean toScore
# void onCreate(Bundle)
+ Bitmap convertStringToBitmap(String)
+ void onBackPressed()
+ void drawBoard_white()
+ void arrangeBoard(PieceColor)
+ void sendMessage(View)
+ String generateMessageKey()
+ int[] getTileId(int,int,PieceColor)
+ void setInvisible()
+ void showLegalMoves(ChessPiece,PieceColor)
+ void movePieceImg(int,int,int,int,PieceColor)
+ void removePieceImg(int,int,PieceColor)
+ ImageView getPieceFromCanvasPos(int,int)
+ void setPiecePosition(int,int,ImageView,PieceColor)
+ int toPixels(int)
+ boolean inRange(int,int)
+ void playEatSound()
+ void playCheckSound()
+ void playCheckmateSound()
+ void switchTurn()
+ void rookCastle(PieceColor,int)
+ void setPositionOfCircle(int,int,ImageView)
+ void checkDialog()
+ void checkmateDialog(PieceColor)
+ void drawDialog()
+ void rematch(View)
+ void toMain(View)
+ void cancel(View)
+ void quit(View)
}
class com.example.chess.MainActivity {
# void onCreate(Bundle)
- void splash()
# void onResume()
# void onRestart()
}
class com.example.chess.SignUp {
- Button signup
- TextView main
- TextInputLayout regUsername
- FirebaseDatabase root
- DatabaseReference users_reference
# void onCreate(Bundle)
- Boolean validateName()
- Boolean validateUsername()
- Boolean validateEmail()
- Boolean validatePhone()
- Boolean validatePassword()
+ void toLogin(View)
+ void saveData(View)
}
class com.example.chess.SignUp$ValidationTextWatcher {
- View view
- <<Create>> ValidationTextWatcher(View)
+ void beforeTextChanged(CharSequence,int,int,int)
+ void onTextChanged(CharSequence,int,int,int)
+ void afterTextChanged(Editable)
}
class com.example.chess.game.Board {
- int SIZE
- ChessPiece[][] pieces
+ <<Create>> Board()
+ void setAllNull()
+ void setStartingPos()
+ int getSIZE()
+ ChessPiece[][] getBoard()
+ ChessPiece[][] getClone()
+ void setBoard(ChessPiece[][])
# Boolean inBoard(int,int)
+ boolean isPiece(int,int,ChessPiece[][])
+ ChessPiece getPiece(int,int,ChessPiece[][])
+ boolean movePiece(int,int,int,int)
+ boolean canMove(int,int,int,int,ChessPiece[][])
+ boolean isOpponentPiece(int,int,ChessPiece,ChessPiece[][])
+ boolean shouldEatPiece(int,int,ChessPiece,ChessPiece[][])
+ boolean eatPiece(int,int,int,int)
+ Position findWhiteKing(ChessPiece[][])
+ Position findBlackKing(ChessPiece[][])
+ boolean checkCheckToColor(PieceColor)
+ boolean canSaveMate(int,int)
+ boolean checkMateToColorNoSaves(PieceColor,ChessPiece[][])
+ boolean checkMateTOColor(PieceColor)
+ boolean checkCheckToColor(int,int,int,int,PieceColor)
+ ChessPiece[][] clone()
- void moveInClone(int,int,int,int,ChessPiece[][])
+ boolean isThreateningPosition(int,int,PieceColor)
+ void kingSideCastle(PieceColor)
+ void queenSideCastle(PieceColor)
+ boolean checkTransformation(int)
+ void setNewQueen(int,int,PieceColor)
+ boolean checkDraw(PieceColor)
+ boolean hasMoves(ChessPiece)
+ boolean canOneMove(PieceColor)
+ boolean kingKingDraw()
+ ArrayList<ChessPiece> allPieces(ChessPiece[][])
}
class com.example.chess.GameSettings {
- View whiteTile
- Intent serviceIntent
- SwitchCompat switchCompat
- SeekBar seekBar
- int current
# void onCreate(Bundle)
+ void saveToSharedPreferences(int[],int[])
- void playAudio()
- void stopAudio()
+ void setOne(View)
+ void setTwo(View)
+ void setThree(View)
+ void setFour(View)
+ void setViewsColor(int[],int[])
+ void goBack(View)
}
interface com.example.chess.abilities.DiagonalSearch {
+ ArrayList<Position> diagonalSearch(Board,ChessPiece[][])
}
class com.example.chess.chat.ChatAdapter {
- List<ChatList> messages
- Context context
- String sender
+ <<Create>> ChatAdapter(List<ChatList>,Context,String)
+ ChatAdapter.MyViewHolder onCreateViewHolder(ViewGroup,int)
+ void onBindViewHolder(ChatAdapter.MyViewHolder,int)
+ int getItemCount()
+ void updateChatList(List<ChatList>)
}
class com.example.chess.chat.ChatAdapter$MyViewHolder {
- LinearLayout oppoLayout
- TextView oppoMsg
+ <<Create>> MyViewHolder(View)
}
interface com.example.chess.abilities.KnightSearch {
+ ArrayList<Position> knightSearch(Board,ChessPiece[][])
}
class com.example.chess.GameOptions {
- DrawerLayout drawerLayout
- Dialog create_join
- String username_sp
- int score_val
- DatabaseReference available_codes
- String[] colors
- Random random
- SharedPreferences sharedPreferences
- LinearLayout loginButtons
- RelativeLayout scoreContainer
- TextView name
- ImageView img
- int REQUEST_CAMERA
# void onCreate(Bundle)
+ String convertBitmapToString(Bitmap)
+ Bitmap convertStringToBitmap(String)
+ void onBackPressed()
- void setMargins(View,int,int,int,int)
- void selectImage()
+ void onActivityResult(int,int,Intent)
+ boolean onNavigationItemSelected(MenuItem)
+ void open_join_create_game_Dialog(View)
+ void open_join_create_game_Dialog()
+ void randomOnlineGame(View)
+ void randomOnlineGame()
+ void open_game_code_Dialog(View)
+ void join_game(View)
+ void create_new_game(View)
+ String randomColor()
+ void openWaitDialog(String)
+ void openWaitDialogOnline()
+ void toLoginFromGame(View)
+ void toSignUpFromGame(View)
+ String generateRandomCode()
# void onDestroy()
+ void setMyColor(String,Intent)
+ void removeGame(View)
+ void toOffline(View)
+ void removeGameOnline(View)
}


com.example.chess.abilities.StraightSearch <|.. com.example.chess.pieces.King
com.example.chess.abilities.DiagonalSearch <|.. com.example.chess.pieces.King
com.example.chess.pieces.ChessPiece <|-- com.example.chess.pieces.King
android.view.View <|-- com.example.chess.BoardDesign.Tile
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess.OfflineGame
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess.UserProfile
com.example.chess.UserProfile +.. com.example.chess.UserProfile$ValidationTextWatcher
com.example.chess.TextWatcher <|.. com.example.chess.UserProfile$ValidationTextWatcher
com.example.chess.abilities.StraightSearch <|.. com.example.chess.pieces.Queen
com.example.chess.abilities.DiagonalSearch <|.. com.example.chess.pieces.Queen
com.example.chess.pieces.ChessPiece <|-- com.example.chess.pieces.Queen
com.example.chess.service.OnCompletionListener <|.. com.example.chess.service.BackgroundMusicService
com.example.chess.service.OnPreparedListener <|.. com.example.chess.service.BackgroundMusicService
com.example.chess.service.OnSeekCompleteListener <|.. com.example.chess.service.BackgroundMusicService
com.example.chess.service.OnInfoListener <|.. com.example.chess.service.BackgroundMusicService
com.example.chess.service.OnBufferingUpdateListener <|.. com.example.chess.service.BackgroundMusicService
com.example.chess.service.OnErrorListener <|.. com.example.chess.service.BackgroundMusicService
android.app.Service <|-- com.example.chess.service.BackgroundMusicService
com.example.chess.abilities.StraightSearch <|.. com.example.chess.pieces.Rook
com.example.chess.pieces.ChessPiece <|-- com.example.chess.pieces.Rook
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess.Login
com.example.chess.abilities.KnightSearch <|.. com.example.chess.pieces.Knight
com.example.chess.pieces.ChessPiece <|-- com.example.chess.pieces.Knight
com.example.chess.abilities.StraightSearch <|.. com.example.chess.pieces.Pawn
com.example.chess.pieces.ChessPiece <|-- com.example.chess.pieces.Pawn
com.example.chess.abilities.DiagonalSearch <|.. com.example.chess.pieces.Bishop
com.example.chess.pieces.ChessPiece <|-- com.example.chess.pieces.Bishop
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess.OnlineGame
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess.MainActivity
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess.SignUp
com.example.chess.SignUp +.. com.example.chess.SignUp$ValidationTextWatcher
com.example.chess.TextWatcher <|.. com.example.chess.SignUp$ValidationTextWatcher
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess.GameSettings
com.example.chess.chat.Adapter <|-- com.example.chess.chat.ChatAdapter
com.example.chess.chat.ChatAdapter +.. com.example.chess.chat.ChatAdapter$MyViewHolder
com.example.chess.chat.ViewHolder <|-- com.example.chess.chat.ChatAdapter$MyViewHolder
com.example.chess.OnNavigationItemSelectedListener <|.. com.example.chess.GameOptions
androidx.appcompat.app.AppCompatActivity <|-- com.example.chess.GameOptions
@enduml